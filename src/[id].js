// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Link from "./components/Link.js";
import * as Post from "./lib/Post.js";
import * as Time from "./components/Time.js";
import * as React from "react";
import * as Js_null from "bs-platform/lib/es6/js_null.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as MainLayout from "./layouts/MainLayout.js";
import * as MarkdownRenderer from "./lib/MarkdownRenderer.js";

function $$default(props) {
  var next = props.next;
  var previous = props.previous;
  return React.createElement(MainLayout.make, {
              children: null
            }, React.createElement("article", undefined, React.createElement("header", undefined), React.createElement(Time.make, {
                      dateString: props.date
                    }), React.createElement("section", undefined, props.title), React.createElement("section", {
                      dangerouslySetInnerHTML: {
                        __html: props.html
                      }
                    })), previous !== null ? React.createElement(Link.make, {
                    children: "<- " + previous.title,
                    href: previous.id
                  }) : null, " - ", next !== null ? React.createElement(Link.make, {
                    children: next.title + " ->",
                    href: next.id
                  }) : null);
}

function getStaticProps(param) {
  var params = param.params;
  var allPosts = Post.getAll(undefined);
  var postIndex = allPosts.findIndex(function (post) {
        return post.id === params.id;
      });
  var post = Caml_array.get(allPosts, postIndex);
  var next = Js_null.fromOption(Belt_Array.get(allPosts, postIndex - 1 | 0));
  var previous = Js_null.fromOption(Belt_Array.get(allPosts, postIndex + 1 | 0));
  var props_date = post.date;
  var props_html = MarkdownRenderer.make(post.body);
  var props_title = post.title;
  var props = {
    date: props_date,
    html: props_html,
    next: next,
    previous: previous,
    title: props_title
  };
  return Promise.resolve({
              props: props
            });
}

function getStaticPaths(param) {
  var ids = Post.getIds(undefined);
  var paths = Belt_Array.map(ids, (function (id) {
          return {
                  params: {
                    id: id
                  }
                };
        }));
  return Promise.resolve({
              paths: paths,
              fallback: false
            });
}

export {
  $$default ,
  $$default as default,
  getStaticProps ,
  getStaticPaths ,
  
}
/* Link Not a pure module */
