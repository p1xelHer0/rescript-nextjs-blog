// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";

function task(name, fn) {
  return {
          TAG: 0,
          _0: {
            name: name,
            fn: fn
          },
          [Symbol.for("name")]: "Task"
        };
}

function seq(a, b) {
  return {
          TAG: 1,
          _0: a,
          _1: b,
          [Symbol.for("name")]: "Seq"
        };
}

function parallel(a, b) {
  return {
          TAG: 2,
          _0: a,
          _1: b,
          [Symbol.for("name")]: "Fork"
        };
}

function _run(t, i) {
  if (typeof t === "number") {
    return Promise.resolve(i);
  }
  switch (t.TAG | 0) {
    case /* Task */0 :
        var match = t._0;
        var name = match.name;
        console.log("[xray::task] Started " + name);
        return Curry._1(match.fn, i).then(function (result) {
                    console.log("[xray::task] Finished " + name);
                    return Promise.resolve(result);
                  });
    case /* Seq */1 :
        var more = t._1;
        return _run(t._0, i).then(function (param) {
                    return _run(more, param);
                  });
    case /* Fork */2 :
        return Promise.all([
                    _run(t._0, i),
                    _run(t._1, i)
                  ]);
    
  }
}

function run(input, pipeline) {
  console.log("[xray::runner] running pipeline");
  return _run(pipeline, input).then(function (x) {
              console.log("[xray::runner] pipeline completed");
              return Promise.resolve(x);
            });
}

var Typeline = {
  task: task,
  seq: seq,
  parallel: parallel,
  run: run
};

export {
  Typeline ,
  
}
/* No side effect */
